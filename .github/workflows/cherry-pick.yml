name: Cherry-pick a release

on:
  workflow_dispatch:
    inputs:
      amp-versions:
        description: AMP version(s) (13 digits) to cherry-pick onto. Perform multiple parallel cherry-picks with a space delimited list (e.g., 2111242025001 2202022130000)
        required: true
        type: string
      shas:
        description: commit sha(s) to cherry-pick with. Stack multiple commits together with a space delimited list (e.g., abcdef1 abcdef2)
        required: true
        type: string

jobs:
  generate-matrix:
    runs-on: ubuntu-latest

    outputs:
      amp-versions: ${{ steps.generate-matrix.outputs.amp-versions }}

    steps:
      - name: ⭐ Generate Matrix ⭐
        id: generate-matrix
        run: |
          read -r -a AMP_VERSIONS <<< "${{ github.event.inputs.amp-versions }}"
          AMP_VERSIONS=$(jq --compact-output --null-input '$ARGS.positional' --args ${AMP_VERSIONS[@]})
          echo ::set-output name=amp-versions::${AMP_VERSIONS}

  cherry-pick:
    needs: generate-matrix

    runs-on: ubuntu-latest

    environment: cherry-pick

    strategy:
      # Do not fail other cherry-picks just because another one fails. It is
      # possible that only one cherry-pick out of many will fail because of a
      # merge conflict that doesn't exist in the other release branches. The
      # release-on-duty should investigate and fix the failed CPs manually.
      fail-fast: false

      matrix:
        amp-version: ${{ fromJSON(needs.generate-matrix.outputs.amp-versions) }}

    steps:
      - name: Checkout ampproject/amphtml
        uses: actions/checkout@v2
        with:
          repository: ampproject/amphtml
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Generate cherry-pick branch name for ${{ matrix.amp-version }}
        id: get-branch
        run: |
          # get amp version to be cherry-picked
          AMP_VERSION=${{ matrix.amp-version }}

          # get number of commits to cherry-pick
          read -r -a SHAS_ARRAY <<< "${{ github.event.inputs.shas }}"
          SHAS_COUNT=${#SHAS_ARRAY[@]}

          # get number of current cherry-picks by taking the last 3 digits
          CURRENT_CP_COUNT=${AMP_VERSION:10:13}

          # add commits to cherry-pick to current cherry-picks, and then pad with 00
          # i.e. if there are 10 cherry-picks total, NEW_CP_COUNT would be 0010
          NEW_CP_COUNT=00$(expr $CURRENT_CP_COUNT + $SHAS_COUNT)

          # set the cherry-picked amp version to be the first 10 digits of the current amp version,
          # then the last 3 digits of the total cherry-picks
          # i.e. if there are 10 cherry-picks total, the last 3 digits would be 010
          CHERRY_PICK_BRANCH=amp-release-${AMP_VERSION:0:10}${NEW_CP_COUNT: -3}
          echo "::set-output name=branch::${CHERRY_PICK_BRANCH}"

      - name: Set git config
        run: |
          NAME=$(git --no-pager log --format=format:'%an' -n 1)
          EMAIL="$(git --no-pager log --format=format:'%ae' -n 1)"
          git config --global user.name $NAME
          git config --global user.email $EMAIL

      - name: ⭐ Cherry-pick ${{ matrix.amp-version }} with ${{ github.event.inputs.shas }} ⭐
        run: |
          git checkout -b ${{ steps.get-branch.outputs.branch }} ${{ matrix.amp-version }}
          git cherry-pick -x ${{ github.event.inputs.shas }}
          git push --set-upstream https://github.com/ampproject/amphtml.git ${{ steps.get-branch.outputs.branch }}

  create-issue-on-error:
    needs: cherry-pick
    if: failure()
    uses: ampproject/cdn-configuration/.github/workflows/create-issue-on-error.yml@main
    with:
      mention: '@ampproject/release-on-duty'
